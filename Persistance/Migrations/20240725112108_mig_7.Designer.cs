// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistance.Contexts;

#nullable disable

namespace Persistance.Migrations
{
    [DbContext(typeof(ECommerceAPIDbContext))]
    [Migration("20240725112108_mig_7")]
    partial class mig_7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("021b2992-64c1-4160-836f-36b0a6446dc2"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7050),
                            Email = "example1@mail.com",
                            Name = "Berke Öztürk",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7050)
                        },
                        new
                        {
                            Id = new Guid("9e95f67b-5093-4e7d-a40c-1bfba880a368"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7060),
                            Email = "example2@mail.com",
                            Name = "Doğa Su Türkileri",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7060)
                        },
                        new
                        {
                            Id = new Guid("bd104b34-10fe-495f-bda9-01aff45faa3d"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7060),
                            Email = "example3@mail.com",
                            Name = "Ervin Parlak",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7060)
                        },
                        new
                        {
                            Id = new Guid("db447099-d227-46e3-8ea5-6d0af8f87e2f"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7060),
                            Email = "example4@mail.com",
                            Name = "Gamze Naz Yıldırım",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7060)
                        },
                        new
                        {
                            Id = new Guid("7d24d476-08c9-4a0c-b063-8d4c720a9167"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7070),
                            Email = "example5@mail.com",
                            Name = "Atakan Yıldırım",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7070)
                        },
                        new
                        {
                            Id = new Guid("6b03d16b-c16a-4994-bd07-b2325542292c"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7070),
                            Email = "example6@mail.com",
                            Name = "Ahmet Mümtaz Taylan",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7070)
                        },
                        new
                        {
                            Id = new Guid("defe0b94-726e-4095-a7eb-e9523bc3bebd"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7070),
                            Email = "example7@mail.com",
                            Name = "Cem Yılmaz",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7080)
                        },
                        new
                        {
                            Id = new Guid("823b9562-6dd4-4875-a894-d760a9928c2b"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7080),
                            Email = "example8@mail.com",
                            Name = "Şahan Gökbakar",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7080)
                        },
                        new
                        {
                            Id = new Guid("71b3b994-6efb-4dd2-a075-a1116a967d49"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7080),
                            Email = "example9@mail.com",
                            Name = "Mahsun Kırmızıgül",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7080)
                        },
                        new
                        {
                            Id = new Guid("b7037f28-11e5-437d-8eff-a2226cd19c2e"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7100),
                            Email = "example10@mail.com",
                            Name = "Erkin Karaçay",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7100)
                        },
                        new
                        {
                            Id = new Guid("5c4f0c1c-f5e4-41a5-842c-72220ecec0fc"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7100),
                            Email = "example11@mail.com",
                            Name = "Ozan İmamhatipoğlu",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7110)
                        },
                        new
                        {
                            Id = new Guid("5104002b-fc7b-4ff1-a992-8159aef78837"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7110),
                            Email = "example12@mail.com",
                            Name = "Barkın Özkaplan",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7110)
                        },
                        new
                        {
                            Id = new Guid("b975bc43-fb3e-4e8a-8181-e1392f8a2aaf"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7110),
                            Email = "example13@mail.com",
                            Name = "Barış Onur Aydın",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7110)
                        },
                        new
                        {
                            Id = new Guid("02bbe1a6-b908-4f7f-8577-69601fa9dbf9"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7120),
                            Email = "example14@mail.com",
                            Name = "Deniz Zarshat",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7120)
                        });
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("957a1a2b-5130-432a-a77f-be335feb289d"),
                            Address = "2222 Oak Drive, Hillcrest, NY 10001",
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7190),
                            CustomerId = new Guid("2012fe04-c7c6-4940-84f0-a1e0f543fe5e"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7190)
                        },
                        new
                        {
                            Id = new Guid("05ce36b4-859e-4467-860d-fb99ba0dc49b"),
                            Address = "456 Elm Avenue, Oakville, CA 94022",
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7190),
                            CustomerId = new Guid("f0448773-a9f2-4820-9ceb-7d545af15b7e"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7190)
                        },
                        new
                        {
                            Id = new Guid("9dac4830-1c29-4d3f-bf1b-68936d70269a"),
                            Address = "10101 Juniper Avenue, Blue Ridge, NC 27501",
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7200),
                            CustomerId = new Guid("a74daf87-beb2-4307-99a8-18d55717c3c8"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7200)
                        },
                        new
                        {
                            Id = new Guid("b1544082-ffbf-4423-b24f-41a796fa7530"),
                            Address = "9999 Spruce Place, Highland, UT 84003",
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7210),
                            CustomerId = new Guid("282b3e41-363c-4f0f-87e4-87f5fc01db17"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7210)
                        },
                        new
                        {
                            Id = new Guid("7c909f5a-4a31-44d2-b670-f5d5fa7faac7"),
                            Address = "4444 Aspen Court, Meadowbrook, OR 97001",
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7210),
                            CustomerId = new Guid("57205986-1877-4445-975b-4ad086a7c1b0"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7210)
                        },
                        new
                        {
                            Id = new Guid("2f190b66-749c-48c6-b6b9-0bd31ef056be"),
                            Address = "789 Pine Lane, Rivertown, TX 75001",
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7220),
                            CustomerId = new Guid("27302df3-ed18-4454-810f-86655a14da73"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7220)
                        },
                        new
                        {
                            Id = new Guid("571a7949-72a0-4d42-8b86-6d50eed9dcf2"),
                            Address = "5555 Redwood Street, Greenfield, AZ 85001",
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7230),
                            CustomerId = new Guid("1f7aceb3-6109-43d9-a362-729b578006e8"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7230)
                        },
                        new
                        {
                            Id = new Guid("94a2b707-d968-4a76-ba07-77d6bffcb673"),
                            Address = "7777 Poplar Path, Brookhaven, GA 30301",
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7230),
                            CustomerId = new Guid("d6a5c7bb-6bfd-4417-8acb-7f9a03d5ac17"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7230)
                        },
                        new
                        {
                            Id = new Guid("481829c7-a28a-467b-8822-b5254a23b36e"),
                            Address = "1010 Birch Road, Forestville, WA 98001",
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7240),
                            CustomerId = new Guid("08cd19c3-7f17-4d6e-9abd-d2dbe870e1a6"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7240)
                        },
                        new
                        {
                            Id = new Guid("92f53599-543a-4d90-af8c-f48d9d7efa94"),
                            Address = "8888 Cypress Circle, Riverview, MI 48201",
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7250),
                            CustomerId = new Guid("9aab7462-78af-4fea-b9dc-c2821cd47a6d"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7250)
                        });
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<double>("Stock")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57b9e375-53c2-4df5-9986-24781db1b4ae"),
                            CategoryId = new Guid("35fa0668-ac2b-4ff3-aaa4-f25eb8a36c37"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7270),
                            Description = "An ergonomic office chair with adjustable height and lumbar support. Ideal for long hours of work.",
                            Name = "BirchCraft Office Chair",
                            Price = 149.99000000000001,
                            Stock = 150.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7270)
                        },
                        new
                        {
                            Id = new Guid("386c2f54-ad3f-468a-8982-19a36e00d597"),
                            CategoryId = new Guid("3dbc50d8-01ff-4504-9b5a-8806ddc1d688"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7270),
                            Description = "Lightweight and comfortable running shoes with breathable mesh and cushioned sole.",
                            Name = "OakHill Running Shoes",
                            Price = 89.989999999999995,
                            Stock = 300.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7270)
                        },
                        new
                        {
                            Id = new Guid("54437af2-8b29-4f17-90a2-abf477aed745"),
                            CategoryId = new Guid("aa93bad0-3991-4a8a-854e-1e8c8eb41125"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7280),
                            Description = "A portable Bluetooth speaker with high-quality sound and long battery life. Perfectforoutdooractivities.",
                            Name = "WillowWave Bluetooth Speaker",
                            Price = 59.990000000000002,
                            Stock = 250.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7280)
                        },
                        new
                        {
                            Id = new Guid("aa64b996-e9f2-450b-b9cb-47706e857437"),
                            CategoryId = new Guid("d695ba01-ae33-468e-8f33-63180b4d7dbe"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7290),
                            Description = "A stylish LED lamp with adjustable brightness and color temperature. Ideal for reading and working.",
                            Name = "AspenGlow LED Lamp",
                            Price = 39.990000000000002,
                            Stock = 180.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7290)
                        },
                        new
                        {
                            Id = new Guid("0f1d1e36-521f-4a1d-8819-07f70451e559"),
                            CategoryId = new Guid("b16e1256-86af-4099-bafd-db06787f68fc"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7290),
                            Description = "A powerful gaming laptop with high-end graphics and fast processing speed. Ideal for gamers.",
                            Name = "RedwoodX Gaming Laptop",
                            Price = 1299.99,
                            Stock = 30.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7290)
                        },
                        new
                        {
                            Id = new Guid("51c74c43-5d3b-4b68-b5ad-57a24a68c62f"),
                            CategoryId = new Guid("718bcaec-40dd-4743-9fe2-5a9668594482"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7300),
                            Description = "A smart home security camera with night vision and motion detection. Connects to your smartphone.",
                            Name = "FirNest Home Security Camera",
                            Price = 99.989999999999995,
                            Stock = 100.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7300)
                        },
                        new
                        {
                            Id = new Guid("17c49146-62ca-40c6-9f67-661dfbaba6b6"),
                            CategoryId = new Guid("a291f8cf-43fe-4fd9-b126-21d08fa0b289"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7300),
                            Description = "A fitness tracker with heart rate monitoring, step counting, and sleep tracking. Waterproof design.",
                            Name = "PoplarPulse Fitness Tracker",
                            Price = 49.990000000000002,
                            Stock = 220.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7300)
                        },
                        new
                        {
                            Id = new Guid("2bed43a5-fffd-4935-bba4-8342b23a4e46"),
                            CategoryId = new Guid("ca55d5b5-9651-4f18-8ba5-6bd73bdcf163"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7310),
                            Description = "A non-slip yoga mat with extra cushioning for comfort. Perfect for yoga and pilates.",
                            Name = "CypressFlow Yoga Mat",
                            Price = 29.989999999999998,
                            Stock = 500.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7310)
                        },
                        new
                        {
                            Id = new Guid("a1239caf-37e7-40d3-8d4a-08e400e92496"),
                            CategoryId = new Guid("dd3a167f-f108-438a-9587-ad6c3504873d"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7320),
                            Description = "A high-performance drone with HD camera and long battery life. Ideal for aerial photography.",
                            Name = "SpruceSky Drone",
                            Price = 349.99000000000001,
                            Stock = 60.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7320)
                        },
                        new
                        {
                            Id = new Guid("d7190fe0-03f4-4292-bfb3-9d3e790352de"),
                            CategoryId = new Guid("d7c60025-1686-477a-94b3-14fbfd7ef26c"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7320),
                            Description = "An insulated water bottle that keeps drinks hot or cold for hours. Made from stainless steel.",
                            Name = "JuniperPure Water Bottle",
                            Price = 24.989999999999998,
                            Stock = 400.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7320)
                        },
                        new
                        {
                            Id = new Guid("3465eec2-4082-4981-a052-80e4c1787c84"),
                            CategoryId = new Guid("fb35511e-fe7a-406a-b20a-b80c7c608bad"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7330),
                            Description = "A durable and flexible smartphone case that provides excellent protection. Compatible with most models.",
                            Name = "MapleFlex Smartphone Case",
                            Price = 19.989999999999998,
                            Stock = 350.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7330)
                        },
                        new
                        {
                            Id = new Guid("b4b4534c-cc35-4e62-a496-397dd72d5ce1"),
                            CategoryId = new Guid("fe5cf69b-555a-4cc7-a1cf-5b221de463df"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7340),
                            Description = "A contemporary table lamp with touch control and adjustable brightness. Perfect for any room.",
                            Name = "ElmGlow Table Lamp",
                            Price = 34.990000000000002,
                            Stock = 140.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7340)
                        },
                        new
                        {
                            Id = new Guid("422e433e-d817-474e-ba63-12e81608f4f6"),
                            CategoryId = new Guid("4e023979-b606-4b6d-8e73-a33906604f7e"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7340),
                            Description = "A professional kitchen knife set with high-carbon stainless steel blades. Includes 6 knives and ablock.",
                            Name = "PineEdge Kitchen Knife Set",
                            Price = 89.989999999999995,
                            Stock = 85.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7340)
                        },
                        new
                        {
                            Id = new Guid("6eba8dda-ec0b-47a2-900f-9c14430e63c8"),
                            CategoryId = new Guid("9e2d05a5-fc78-4537-88d6-dc94e6015f59"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7350),
                            Description = "High-quality wireless earbuds with noise cancellation and long battery life. Comes with a chargingcase.",
                            Name = "BirchSound Wireless Earbuds",
                            Price = 79.989999999999995,
                            Stock = 300.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7350)
                        },
                        new
                        {
                            Id = new Guid("4639e332-6d30-4d56-9049-bb6153d792a0"),
                            CategoryId = new Guid("c248b181-00b9-4661-8018-40c379dd795a"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7360),
                            Description = "A programmable coffee maker with a built-in grinder and timer. Makes up to 12 cups of coffee.",
                            Name = "OakPure Coffee Maker",
                            Price = 129.99000000000001,
                            Stock = 90.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7360)
                        },
                        new
                        {
                            Id = new Guid("168a1ef2-b01a-43fd-8ad4-20b19e76e5ad"),
                            CategoryId = new Guid("9d96387e-c8b1-4504-b803-632ec7be9f06"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7360),
                            Description = "A lightweight and durable camping tent that accommodates up to 4 people. Easy to set up.",
                            Name = "WillowLite Camping Tent",
                            Price = 199.99000000000001,
                            Stock = 70.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7360)
                        },
                        new
                        {
                            Id = new Guid("a3382b72-5452-44a2-990d-d060b4780ae9"),
                            CategoryId = new Guid("e6a79807-08df-4a07-8fde-6be7373803b3"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7370),
                            Description = "A compact mini fridge with adjustable temperature settings. Perfect for dorm rooms and offices.",
                            Name = "AspenCool Mini Fridge",
                            Price = 149.99000000000001,
                            Stock = 120.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7370)
                        },
                        new
                        {
                            Id = new Guid("31b9ca67-1956-4da1-ad92-414203ac30cc"),
                            CategoryId = new Guid("47112e0f-7a07-4803-8be3-cc521966860a"),
                            CreatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7370),
                            Description = "A high-capacity power bank with fast charging technology. Compatible with all USB devices.",
                            Name = "RedwoodMax Power Bank",
                            Price = 39.990000000000002,
                            Stock = 250.0,
                            UpdatedDate = new DateTime(2024, 7, 25, 11, 21, 8, 52, DateTimeKind.Utc).AddTicks(7370)
                        });
                });

            modelBuilder.Entity("Domain.ProductsCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });
#pragma warning restore 612, 618
        }
    }
}
