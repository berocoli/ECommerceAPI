// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistance.Contexts;

#nullable disable

namespace Persistance.Migrations
{
    [DbContext(typeof(ECommerceAPIDbContext))]
    [Migration("20240724144816_mig_6")]
    partial class mig_6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f9c3387-32d1-4352-bb2b-9b55ee564339"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6600),
                            Name = "Berke Öztürk",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6600)
                        },
                        new
                        {
                            Id = new Guid("79922af9-58bd-440f-ba27-894ba58a9753"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6610),
                            Name = "Doğa Su Türkileri",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6610)
                        },
                        new
                        {
                            Id = new Guid("334b725c-c51a-4239-a97a-0247eafac600"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6610),
                            Name = "Ervin Parlak",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6610)
                        },
                        new
                        {
                            Id = new Guid("426fab99-9c25-408d-9b59-5381ecfee7cb"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6610),
                            Name = "Gamze Naz Yıldırım",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6610)
                        },
                        new
                        {
                            Id = new Guid("36581f97-a442-492d-bfe6-e6cc01a05b95"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6620),
                            Name = "Atakan Yıldırım",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6620)
                        },
                        new
                        {
                            Id = new Guid("9ba3d168-2636-4e91-a2ce-fac2d26b1c10"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6620),
                            Name = "Ahmet Mümtaz Taylan",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6620)
                        },
                        new
                        {
                            Id = new Guid("cca7f8b1-7918-48d8-ac84-4d5b4854c96d"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6620),
                            Name = "Cem Yılmaz",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6620)
                        },
                        new
                        {
                            Id = new Guid("5d9ba5f9-05bf-47df-b155-65b0db94ac4c"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6630),
                            Name = "Şahan Gökbakar",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6630)
                        },
                        new
                        {
                            Id = new Guid("f1e37b6d-1b56-4b73-b920-5671eabcd82a"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6630),
                            Name = "Mahsun Kırmızıgül",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6630)
                        },
                        new
                        {
                            Id = new Guid("6ff2f372-516d-4acc-8018-c47baf771fc0"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6640),
                            Name = "Erkin Karaçay",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6640)
                        },
                        new
                        {
                            Id = new Guid("4f70160b-e0fe-4f02-b367-2711e3ec09b3"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6640),
                            Name = "Ozan İmamhatipoğlu",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6640)
                        },
                        new
                        {
                            Id = new Guid("8a3ec824-4dfb-4578-a7ef-1d80b04f7f74"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6640),
                            Name = "Barkın Özkaplan",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6640)
                        },
                        new
                        {
                            Id = new Guid("40b70c62-0bd2-4f60-9375-170f899caddd"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6650),
                            Name = "Barış Onur Aydın",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6650)
                        },
                        new
                        {
                            Id = new Guid("caa2cfdd-8102-43aa-876d-d05b82b99774"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6650),
                            Name = "Deniz Zarshat",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6650)
                        });
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dfd7724a-440f-4528-8283-9afd5202db71"),
                            Address = "2222 Oak Drive, Hillcrest, NY 10001",
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6730),
                            CustomerId = new Guid("e502231d-da5c-4599-b6d4-b48bee0005c4"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6730)
                        },
                        new
                        {
                            Id = new Guid("4067b7e8-641b-4975-95ff-edf6e7e70031"),
                            Address = "456 Elm Avenue, Oakville, CA 94022",
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6730),
                            CustomerId = new Guid("7c7c1546-cc8b-47e7-8949-fa3105e037ec"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6730)
                        },
                        new
                        {
                            Id = new Guid("992fe19f-d6b7-4060-9702-c5cad5421d6f"),
                            Address = "10101 Juniper Avenue, Blue Ridge, NC 27501",
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6740),
                            CustomerId = new Guid("e71aa97b-ad44-498f-9851-7724def242db"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6740)
                        },
                        new
                        {
                            Id = new Guid("4437e6ba-bf29-4ed0-97d8-33b28ab907c4"),
                            Address = "9999 Spruce Place, Highland, UT 84003",
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6750),
                            CustomerId = new Guid("d378f285-dd87-4644-beb5-ea6d65e0ad19"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6750)
                        },
                        new
                        {
                            Id = new Guid("04b22a55-b9cf-43b3-8991-46fb1ac918f0"),
                            Address = "4444 Aspen Court, Meadowbrook, OR 97001",
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6750),
                            CustomerId = new Guid("0a095e95-12bd-4794-b5fd-20a59c8ba256"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6750)
                        },
                        new
                        {
                            Id = new Guid("7f3190a1-de27-4fd6-a871-8e3eaec439cd"),
                            Address = "789 Pine Lane, Rivertown, TX 75001",
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6760),
                            CustomerId = new Guid("1c5cd972-d122-4840-b267-6d87b5f56218"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6760)
                        },
                        new
                        {
                            Id = new Guid("cd17ad98-6b38-497a-9af8-d515fe668287"),
                            Address = "5555 Redwood Street, Greenfield, AZ 85001",
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6770),
                            CustomerId = new Guid("f9c926fb-e83e-442c-8106-e779034b900e"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6770)
                        },
                        new
                        {
                            Id = new Guid("8e532579-afbf-44b8-b404-1a6cab29e62f"),
                            Address = "7777 Poplar Path, Brookhaven, GA 30301",
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6770),
                            CustomerId = new Guid("b99a63a8-2e60-4381-9ca3-d8706daa41ef"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6770)
                        },
                        new
                        {
                            Id = new Guid("6c178372-e5d1-4792-a54b-69d8f93cbb60"),
                            Address = "1010 Birch Road, Forestville, WA 98001",
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6780),
                            CustomerId = new Guid("009d91c9-0094-4869-bece-e7e3800aad42"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6780)
                        },
                        new
                        {
                            Id = new Guid("0d0ad0ed-fae3-4f11-a9db-5f7fa68f06b2"),
                            Address = "8888 Cypress Circle, Riverview, MI 48201",
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6790),
                            CustomerId = new Guid("f675151a-9a75-49ef-948d-5372993821c2"),
                            Description = " Please leave the package at the front porch if no one is home.",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6790)
                        });
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<double>("Stock")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e41c522-22b8-4066-9d3c-6c3ee0f6e91c"),
                            CategoryId = new Guid("ea9d423b-f45b-438e-bac6-079eb85d7b27"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6810),
                            Description = "An ergonomic office chair with adjustable height and lumbar support. Ideal for long hours of work.",
                            Name = "BirchCraft Office Chair",
                            Price = 149.99000000000001,
                            Stock = 150.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6810)
                        },
                        new
                        {
                            Id = new Guid("0aa6804c-b34c-4160-a678-eee372f7f939"),
                            CategoryId = new Guid("1cfa36c8-b2a9-4b21-a7aa-38a1e4a42b7a"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6820),
                            Description = "Lightweight and comfortable running shoes with breathable mesh and cushioned sole.",
                            Name = "OakHill Running Shoes",
                            Price = 89.989999999999995,
                            Stock = 300.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6820)
                        },
                        new
                        {
                            Id = new Guid("eecf2ca3-ba87-42ec-b1bd-570a9b98e709"),
                            CategoryId = new Guid("fd17bb46-828c-465d-b665-d6a2142f8d69"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6820),
                            Description = "A portable Bluetooth speaker with high-quality sound and long battery life. Perfect for outdooractivities.",
                            Name = "WillowWave Bluetooth Speaker",
                            Price = 59.990000000000002,
                            Stock = 250.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6820)
                        },
                        new
                        {
                            Id = new Guid("979cdb72-b99c-4d19-b019-31cced190935"),
                            CategoryId = new Guid("04289bbe-defc-49a0-8fe7-3e8be83b0240"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6830),
                            Description = "A stylish LED lamp with adjustable brightness and color temperature. Ideal for reading and working.",
                            Name = "AspenGlow LED Lamp",
                            Price = 39.990000000000002,
                            Stock = 180.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6830)
                        },
                        new
                        {
                            Id = new Guid("2d4c69c8-ec2d-4db2-934a-f0c6631a9778"),
                            CategoryId = new Guid("4d9f352c-fbdd-488d-a6f1-418182338be9"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6840),
                            Description = "A powerful gaming laptop with high-end graphics and fast processing speed. Ideal for gamers.",
                            Name = "RedwoodX Gaming Laptop",
                            Price = 1299.99,
                            Stock = 30.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6840)
                        },
                        new
                        {
                            Id = new Guid("b3fcb046-ae3c-4b13-bc89-70cfed9479ad"),
                            CategoryId = new Guid("4ab3de3e-7657-448f-af78-0f4653e9eb01"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6840),
                            Description = "A smart home security camera with night vision and motion detection. Connects to your smartphone.",
                            Name = "FirNest Home Security Camera",
                            Price = 99.989999999999995,
                            Stock = 100.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6840)
                        },
                        new
                        {
                            Id = new Guid("3d169583-70cf-40ea-92ff-68e40259fc1b"),
                            CategoryId = new Guid("d827aca4-a501-4ef2-a0a7-655ef8d0ba67"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6850),
                            Description = "A fitness tracker with heart rate monitoring, step counting, and sleep tracking. Waterproof design.",
                            Name = "PoplarPulse Fitness Tracker",
                            Price = 49.990000000000002,
                            Stock = 220.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6850)
                        },
                        new
                        {
                            Id = new Guid("6d497a0c-fb67-4cfc-9b3d-9c7707540945"),
                            CategoryId = new Guid("1e95f668-d795-4947-8c3d-7379ddfcc67e"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6860),
                            Description = "A non-slip yoga mat with extra cushioning for comfort. Perfect for yoga and pilates.",
                            Name = "CypressFlow Yoga Mat",
                            Price = 29.989999999999998,
                            Stock = 500.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6860)
                        },
                        new
                        {
                            Id = new Guid("4ba932ff-e2b9-42ef-8891-6d45158ba08d"),
                            CategoryId = new Guid("0c06de46-714c-46b5-8da6-23850c5ce244"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6860),
                            Description = "A high-performance drone with HD camera and long battery life. Ideal for aerial photography.",
                            Name = "SpruceSky Drone",
                            Price = 349.99000000000001,
                            Stock = 60.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6860)
                        },
                        new
                        {
                            Id = new Guid("66d31bdc-e187-4d7a-a6a2-b5396e9f04d2"),
                            CategoryId = new Guid("b4361ec9-79da-4dc5-94d4-db1075b57d21"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6870),
                            Description = "An insulated water bottle that keeps drinks hot or cold for hours. Made from stainless steel.",
                            Name = "JuniperPure Water Bottle",
                            Price = 24.989999999999998,
                            Stock = 400.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6870)
                        },
                        new
                        {
                            Id = new Guid("b3289928-7736-40bb-bba9-7f25bcb19537"),
                            CategoryId = new Guid("587187cc-73b2-42ef-bc87-16f563bab558"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6880),
                            Description = "A durable and flexible smartphone case that provides excellent protection. Compatible with most models.",
                            Name = "MapleFlex Smartphone Case",
                            Price = 19.989999999999998,
                            Stock = 350.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6880)
                        },
                        new
                        {
                            Id = new Guid("9cafd476-b1c1-4a0c-b09f-96468949facd"),
                            CategoryId = new Guid("0c47df89-a0c7-4326-ad44-d90ec45b0fb9"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6880),
                            Description = "A contemporary table lamp with touch control and adjustable brightness. Perfect for any room.",
                            Name = "ElmGlow Table Lamp",
                            Price = 34.990000000000002,
                            Stock = 140.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6880)
                        },
                        new
                        {
                            Id = new Guid("cd93c1b0-2486-4fa2-93cf-41b1e06948ed"),
                            CategoryId = new Guid("04148bca-6c84-4ddf-87b2-7fef4cf4b587"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6890),
                            Description = "A professional kitchen knife set with high-carbon stainless steel blades. Includes 6 knives and a block.",
                            Name = "PineEdge Kitchen Knife Set",
                            Price = 89.989999999999995,
                            Stock = 85.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6890)
                        },
                        new
                        {
                            Id = new Guid("a53cb171-f4bd-40ad-af4d-00eb1cacf8a2"),
                            CategoryId = new Guid("81b4dac2-5df3-4132-bb5e-25267f575816"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6890),
                            Description = "High-quality wireless earbuds with noise cancellation and long battery life. Comes with a charging case.",
                            Name = "BirchSound Wireless Earbuds",
                            Price = 79.989999999999995,
                            Stock = 300.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6890)
                        },
                        new
                        {
                            Id = new Guid("31c73a76-a11f-48de-8820-e9bb95c85aab"),
                            CategoryId = new Guid("4d6d02da-6e75-4cd4-a1d0-ecfe1d3b63f5"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6900),
                            Description = "A programmable coffee maker with a built-in grinder and timer. Makes up to 12 cups of coffee.",
                            Name = "OakPure Coffee Maker",
                            Price = 129.99000000000001,
                            Stock = 90.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6900)
                        },
                        new
                        {
                            Id = new Guid("eb3afb6e-1a2d-4d39-9761-33c118bc2e73"),
                            CategoryId = new Guid("ad411f20-5e23-4d33-9a30-3d7f7a647245"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6910),
                            Description = "A lightweight and durable camping tent that accommodates up to 4 people. Easy to set up.",
                            Name = "WillowLite Camping Tent",
                            Price = 199.99000000000001,
                            Stock = 70.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6910)
                        },
                        new
                        {
                            Id = new Guid("e37e9bc0-aaaa-416f-b0a2-c79613e9fdc8"),
                            CategoryId = new Guid("14fdc4c5-f660-4385-9c6a-01f4e5941a56"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6910),
                            Description = "A compact mini fridge with adjustable temperature settings. Perfect for dorm rooms and offices.",
                            Name = "AspenCool Mini Fridge",
                            Price = 149.99000000000001,
                            Stock = 120.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6910)
                        },
                        new
                        {
                            Id = new Guid("903f2511-1e6c-4394-bbf7-b10c861ee87c"),
                            CategoryId = new Guid("cbd450cc-ea30-4c1f-9548-6fb0508a0471"),
                            CreatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6920),
                            Description = "A high-capacity power bank with fast charging technology. Compatible with all USB devices.",
                            Name = "RedwoodMax Power Bank",
                            Price = 39.990000000000002,
                            Stock = 250.0,
                            UpdatedDate = new DateTime(2024, 7, 24, 14, 48, 16, 401, DateTimeKind.Utc).AddTicks(6920)
                        });
                });

            modelBuilder.Entity("Domain.ProductsCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });
#pragma warning restore 612, 618
        }
    }
}
