// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ECommerceAPIDbContext))]
    [Migration("20241003072457_migra1")]
    partial class migra1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e94aaf6e-c5d5-4e7a-a9c9-bdb17f504012"),
                            CreatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5720),
                            UpdatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5720),
                            UserId = new Guid("c72d7b59-898e-466c-98ff-9ddfe5f21d75")
                        },
                        new
                        {
                            Id = new Guid("d45e50b8-b840-4554-a99b-0029d7431587"),
                            CreatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5720),
                            UpdatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5720),
                            UserId = new Guid("1bcbeb89-608a-41d6-b875-6a0d206713dd")
                        });
                });

            modelBuilder.Entity("Domain.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa809200-614d-4c98-8719-df4ae70abf1a"),
                            CartId = new Guid("e94aaf6e-c5d5-4e7a-a9c9-bdb17f504012"),
                            CreatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5730),
                            ProductId = new Guid("0a4ff980-cbd7-4a25-8e90-90f182a546dc"),
                            Quantity = 2,
                            UpdatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5730)
                        },
                        new
                        {
                            Id = new Guid("db006314-8c62-4bfb-ab9c-cc2ce6af1988"),
                            CartId = new Guid("d45e50b8-b840-4554-a99b-0029d7431587"),
                            CreatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5740),
                            ProductId = new Guid("0d4bb849-f64b-47fe-a6a6-3a626cfcdc9a"),
                            Quantity = 1,
                            UpdatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5740)
                        });
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b727fc35-8024-4fec-b31d-4d9eb3a466ad"),
                            Address = "123 Main St",
                            CartId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5760),
                            Description = "Deliver ASAP",
                            Status = "Pending",
                            UpdatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5760),
                            UserId = new Guid("c72d7b59-898e-466c-98ff-9ddfe5f21d75")
                        },
                        new
                        {
                            Id = new Guid("0deb4047-8394-4b6f-8d42-be92b3c27b25"),
                            Address = "456 Elm St",
                            CartId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5760),
                            Description = "Gift order",
                            Status = "Shipped",
                            UpdatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5760),
                            UserId = new Guid("1bcbeb89-608a-41d6-b875-6a0d206713dd")
                        });
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<double>("Stock")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a4ff980-cbd7-4a25-8e90-90f182a546dc"),
                            CategoryId = new Guid("bc056651-bf49-4cc8-88fc-9e5a654c70cf"),
                            CreatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5690),
                            Description = "Latest smartphone model",
                            ImageUrl = "/images/smartphone.jpg",
                            Name = "Smartphone",
                            Price = 599.99000000000001,
                            Stock = 100.0,
                            UpdatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5690)
                        },
                        new
                        {
                            Id = new Guid("988bcece-9755-4a78-9a04-958d8c38ea60"),
                            CategoryId = new Guid("bc056651-bf49-4cc8-88fc-9e5a654c70cf"),
                            CreatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5690),
                            Description = "High-performance laptop",
                            ImageUrl = "/images/laptop.jpg",
                            Name = "Laptop",
                            Price = 1099.99,
                            Stock = 50.0,
                            UpdatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5690)
                        },
                        new
                        {
                            Id = new Guid("0d4bb849-f64b-47fe-a6a6-3a626cfcdc9a"),
                            CategoryId = new Guid("30607da0-a589-4f3a-bed0-fdfdc86fa0a0"),
                            CreatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5700),
                            Description = "Interesting novel",
                            ImageUrl = "/images/booka.jpg",
                            Name = "Book A",
                            Price = 19.989999999999998,
                            Stock = 200.0,
                            UpdatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5700)
                        });
                });

            modelBuilder.Entity("Domain.ProductsCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc056651-bf49-4cc8-88fc-9e5a654c70cf"),
                            CategoryName = "Electronics",
                            CreatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5670),
                            UpdatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5670)
                        },
                        new
                        {
                            Id = new Guid("30607da0-a589-4f3a-bed0-fdfdc86fa0a0"),
                            CategoryName = "Books",
                            CreatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5670),
                            UpdatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5670)
                        });
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Role")
                        .HasColumnType("boolean");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c72d7b59-898e-466c-98ff-9ddfe5f21d75"),
                            CreatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 654, DateTimeKind.Utc).AddTicks(2470),
                            Email = "berkeozturk@mail.com",
                            Name = "Berke",
                            Password = "MV3HwrWZU1xwlIdGz/aDfA==.bK1dScwjLoFs4rrZ9bV6we8ZM7Y+qJVqFdl4kyVRMXg=",
                            Role = true,
                            Surname = "Öztürk",
                            UpdatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 654, DateTimeKind.Utc).AddTicks(2470)
                        },
                        new
                        {
                            Id = new Guid("1bcbeb89-608a-41d6-b875-6a0d206713dd"),
                            CreatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 660, DateTimeKind.Utc).AddTicks(4250),
                            Email = "dogasuturkileri@mail.com",
                            Name = "Doğa Su",
                            Password = "E/CBTOmLHEsC7jockEih9g==.FOtiYzSRUaSEjT6gDirIBYUde81zELaD+R+RFWrw2uo=",
                            Role = false,
                            Surname = "Türkileri",
                            UpdatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 660, DateTimeKind.Utc).AddTicks(4250)
                        },
                        new
                        {
                            Id = new Guid("d049f157-ba7c-4ffc-ab16-a3aebaebb60d"),
                            CreatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5570),
                            Email = "serpinkaratay@mail.com",
                            Name = "Soupy Serpin",
                            Password = "/IaUhcgRyQ/taVuZomiL2A==.3ef9cWIIGj3rd+etkdGVR51CP0YG2vkzoh0dAYlK4hk=",
                            Role = false,
                            Surname = "Karasay",
                            UpdatedDate = new DateTime(2024, 10, 3, 7, 24, 57, 666, DateTimeKind.Utc).AddTicks(5570)
                        });
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.HasOne("Domain.Order", "Order")
                        .WithOne("Cart")
                        .HasForeignKey("Cart", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.CartItem", b =>
                {
                    b.HasOne("Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.HasOne("Domain.ProductsCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Domain.ProductsCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
